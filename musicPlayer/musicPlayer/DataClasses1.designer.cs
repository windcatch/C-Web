#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace musicPlayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertuserInfo(userInfo instance);
    partial void UpdateuserInfo(userInfo instance);
    partial void DeleteuserInfo(userInfo instance);
    partial void Insertmusic(music instance);
    partial void Updatemusic(music instance);
    partial void Deletemusic(music instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Database1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<userInfo> userInfo
		{
			get
			{
				return this.GetTable<userInfo>();
			}
		}
		
		public System.Data.Linq.Table<music> music
		{
			get
			{
				return this.GetTable<music>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userInfo")]
	public partial class userInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private string _username;
		
		private string _password;
		
		private EntitySet<music> _music;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public userInfo()
		{
			this._music = new EntitySet<music>(new Action<music>(this.attach_music), new Action<music>(this.detach_music));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userInfo_music", Storage="_music", ThisKey="userId", OtherKey="userId")]
		public EntitySet<music> music
		{
			get
			{
				return this._music;
			}
			set
			{
				this._music.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_music(music entity)
		{
			this.SendPropertyChanging();
			entity.userInfo = this;
		}
		
		private void detach_music(music entity)
		{
			this.SendPropertyChanging();
			entity.userInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.music")]
	public partial class music : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _musicId;
		
		private int _userId;
		
		private string _musicName;
		
		private string _musicAuthor;
		
		private string _musicImg;
		
		private string _musicUrl;
		
		private EntityRef<userInfo> _userInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmusicIdChanging(int value);
    partial void OnmusicIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnmusicNameChanging(string value);
    partial void OnmusicNameChanged();
    partial void OnmusicAuthorChanging(string value);
    partial void OnmusicAuthorChanged();
    partial void OnmusicImgChanging(string value);
    partial void OnmusicImgChanged();
    partial void OnmusicUrlChanging(string value);
    partial void OnmusicUrlChanged();
    #endregion
		
		public music()
		{
			this._userInfo = default(EntityRef<userInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int musicId
		{
			get
			{
				return this._musicId;
			}
			set
			{
				if ((this._musicId != value))
				{
					this.OnmusicIdChanging(value);
					this.SendPropertyChanging();
					this._musicId = value;
					this.SendPropertyChanged("musicId");
					this.OnmusicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._userInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string musicName
		{
			get
			{
				return this._musicName;
			}
			set
			{
				if ((this._musicName != value))
				{
					this.OnmusicNameChanging(value);
					this.SendPropertyChanging();
					this._musicName = value;
					this.SendPropertyChanged("musicName");
					this.OnmusicNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicAuthor", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string musicAuthor
		{
			get
			{
				return this._musicAuthor;
			}
			set
			{
				if ((this._musicAuthor != value))
				{
					this.OnmusicAuthorChanging(value);
					this.SendPropertyChanging();
					this._musicAuthor = value;
					this.SendPropertyChanged("musicAuthor");
					this.OnmusicAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicImg", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string musicImg
		{
			get
			{
				return this._musicImg;
			}
			set
			{
				if ((this._musicImg != value))
				{
					this.OnmusicImgChanging(value);
					this.SendPropertyChanging();
					this._musicImg = value;
					this.SendPropertyChanged("musicImg");
					this.OnmusicImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_musicUrl", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string musicUrl
		{
			get
			{
				return this._musicUrl;
			}
			set
			{
				if ((this._musicUrl != value))
				{
					this.OnmusicUrlChanging(value);
					this.SendPropertyChanging();
					this._musicUrl = value;
					this.SendPropertyChanged("musicUrl");
					this.OnmusicUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="userInfo_music", Storage="_userInfo", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public userInfo userInfo
		{
			get
			{
				return this._userInfo.Entity;
			}
			set
			{
				userInfo previousValue = this._userInfo.Entity;
				if (((previousValue != value) 
							|| (this._userInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._userInfo.Entity = null;
						previousValue.music.Remove(this);
					}
					this._userInfo.Entity = value;
					if ((value != null))
					{
						value.music.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("userInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
